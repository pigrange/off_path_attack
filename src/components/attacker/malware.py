# @coding: utf-8
# @Author：john pig
# @Date ：10/11/2019 5:07 PM
# @Tool ：PyCharm
import threading
from abc import ABCMeta, abstractmethod

# 抽象类，定义可被恶意软件感染的目标
from src.components.attacker.attack_server import AttackerServer
from src.components.end_host.system_service.network.network_listener import NetWorkListener

MALWARE_COUNT = 0


class Parasitic:
    __metaclass__ = ABCMeta

    @abstractmethod
    def on_infect(self):
        pass


class __Malware(NetWorkListener):

    def on_package_received(self):
        shell = self.shell
        # print('listener: ', self.name, '  on_package_received')
        net_state = shell.query_net_state()
        print(threading.currentThread(), 'Malware: ')
        print(net_state)
        # todo 向恶意服务器通知,证明接收到了消息
        pass

    # victim以为建立了连接,广播已建立链接
    def on_establish_connection(self, origin, dest):
        self.remote.notify_second_handshake_sent(origin, dest)
        pass

    def __init__(self):
        global MALWARE_COUNT
        self.shell = None
        self.victim = None
        self.name = 'malware_' + str(MALWARE_COUNT)
        MALWARE_COUNT += 1
        self.remote = AttackerServer(malware=self)
        pass

    def infect_victim(self, victim):
        self.victim = victim
        shell = self.victim.on_infect()
        shell.register_network_listener(self)
        self.shell = shell


def infect(victim: Parasitic):
    __Malware().infect_victim(victim)
    pass
